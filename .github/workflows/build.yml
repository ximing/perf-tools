name: Build/Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      source:
        description: "Branch to build"
        type: string
        default: "master"

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source || github.ref }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          yarn config set network-timeout 900000 -g
          yarn install

      - name: Create universal ffmpeg binaries for macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          rm -f node_modules/ffmpeg-static/ffmpeg
          npm_config_arch=arm64 yarn add --check-files ffmpeg-static
          mv node_modules/ffmpeg-static/ffmpeg ffmpeg-arm64
          npm_config_arch=x64 yarn add --check-files ffmpeg-static
          mv node_modules/ffmpeg-static/ffmpeg ffmpeg-x64
          lipo -create ffmpeg-arm64 ffmpeg-x64 -output node_modules/ffmpeg-static/ffmpeg
          rm ffmpeg-arm64 ffmpeg-x64
          file node_modules/ffmpeg-static/ffmpeg

      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libarchive-tools

      # macOS 构建
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_HARD_LINKS: false

      # Windows 构建
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_HARD_LINKS: false

      # Linux 构建
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_HARD_LINKS: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            release/*.dmg
            release/*.exe
            release/*.deb
            release/*.AppImage
          if-no-files-found: ignore
          compression-level: 0

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.dmg
            release/*.exe
            release/*.deb
            release/*.AppImage
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

      - name: List artifacts
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -R release/
